import re
import click
import os
from pathlib import Path

CONFIG_PATH = Path.home() / ".seshat"


def validate_config():
    """Carrega e valida as configura√ß√µes necess√°rias"""
    # Verifica provider primeiro
    provider = os.getenv("AI_PROVIDER")
    if not provider:
        raise ValueError(
            "Vari√°vel AI_PROVIDER n√£o configurada!\n"
            "Defina no .env: AI_PROVIDER=deepseek ou AI_PROVIDER=claude ou AI_PROVIDER=openai"
        )

    # Verifica model primeiro
    model = os.getenv("AI_MODEL")
    if not model:
        raise ValueError("Vari√°vel AI_MODEL n√£o configurada!\nDefina no .env: AI_MODEL")

    # Valida provider
    valid_providers = ["deepseek", "claude", "ollama", "openai"]
    if provider not in valid_providers:
        raise ValueError(
            f"Provedor inv√°lido: {provider}. Op√ß√µes v√°lidas: {', '.join(valid_providers)}"
        )

    config = {
        "provider": os.getenv("AI_PROVIDER", "deepseek"),
        "model": os.getenv("AI_MODEL"),
    }

    # Validar chaves de API
    provider = config["provider"]
    api_key = os.getenv("API_KEY")
    model = config["model"]

    if not api_key:
        raise ValueError(
            f"API Key n√£o encontrada para {provider}. Configure usando:\n"
            f"1. Vari√°vel de ambiente {'API_KEY'}\n"
            "2. Arquivo .env"
        )

    return config


def display_error(message):
    """Exibe erros formatados"""
    click.secho(f"üö® Erro: {message}", fg="red")


def clean_think_tags(message):
    """
    Remove as tags <think> e todo o conte√∫do entre elas da mensagem.

    Alguns modelos retornam tags <think> com conte√∫do de racioc√≠nio interno,
    que deve ser removido para evitar erros na valida√ß√£o do Conventional Commits.

    Args:
        message (str): A mensagem que pode conter tags <think>

    Returns:
        str: A mensagem limpa sem as tags <think> e seu conte√∫do
    """
    if not message:
        return message

    # Remove tudo entre <think> e </think>, incluindo as tags
    # Usa re.DOTALL para que . corresponda a quebras de linha tamb√©m
    clean_message = re.sub(
        r"<think>.*?</think>", "", message, flags=re.DOTALL | re.IGNORECASE
    )

    # Remove espa√ßos em branco extras que podem ter ficado
    clean_message = clean_message.strip()

    return clean_message


def is_valid_conventional_commit(message):
    """
    Valida se a mensagem segue a especifica√ß√£o Conventional Commits 1.0.0.

    Estrutura:
    <type>[optional scope][!]: <description>
    [optional body]
    [optional footer(s)]

    Exemplos v√°lidos:
    - feat: nova funcionalidade
    - fix(core): corre√ß√£o de bug
    - feat!: breaking change no t√≠tulo
    - feat(api)!: breaking change com escopo
    - chore: commit normal
      BREAKING CHANGE: breaking change no footer
    """
    # Define os tipos permitidos (n√£o case sensitive)
    TYPES = [
        "feat",
        "fix",
        "docs",
        "style",
        "refactor",
        "perf",
        "test",
        "chore",
        "build",
        "ci",
        "revert",
    ]

    # Separa o header (primeira linha) do resto da mensagem
    parts = message.split("\n", 1)
    header = parts[0].strip()
    body_and_footer = parts[1].strip() if len(parts) > 1 else ""

    # Padr√£o para o header:
    # - tipo (obrigat√≥rio)
    # - escopo (opcional, entre par√™nteses)
    # - ! (opcional, para breaking changes)
    # - : e espa√ßo (obrigat√≥rio)
    # - descri√ß√£o (obrigat√≥rio)
    header_pattern = (
        r"^("  # in√≠cio da string
        r"(?P<type>" + "|".join(TYPES) + r")"  # tipo
        r"(?:\((?P<scope>[^)]+)\))?"  # escopo opcional
        r"(?P<breaking>!)?"  # breaking change opcional
        r": "  # : e espa√ßo obrigat√≥rios
        r"(?P<description>.+)"  # descri√ß√£o
        r")$"
    )

    header_match = re.match(header_pattern, header, re.IGNORECASE)
    if not header_match:
        return False

    # Verifica se h√° breaking changes
    footer_pattern = r"BREAKING[ -]CHANGE: .*"
    has_breaking_change = bool(
        header_match.group("breaking")
        or re.search(footer_pattern, body_and_footer, re.IGNORECASE)
    )

    # Se tem corpo ou footer, aplica valida√ß√µes adicionais
    if body_and_footer:
        # Valida que breaking changes est√£o bem formados
        if has_breaking_change:
            # Se tem ! no header, deve ter descri√ß√£o adequada
            if (
                header_match.group("breaking")
                and len(header_match.group("description")) < 10
            ):
                return False
            # Se tem BREAKING CHANGE no footer, deve ter descri√ß√£o ap√≥s ":"
            footer_match = re.search(footer_pattern, body_and_footer, re.IGNORECASE)
            if footer_match and len(footer_match.group(0).split(":", 1)[1].strip()) < 5:
                return False

        return True

    return True
